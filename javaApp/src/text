-------------------------------------------------------------------------------------------------------------
2024.11.26(화)
public class App {
    public static void main(String[] args) throws Exception {
        System.out.println("Hello, World!");
    }
}


스트링 타입


UML 
객체지향 설계 언어 
클래스다이어그램이라고 표현한다

클래스이름
속성
오퍼레이션

기본자료형

참조형(레퍼런스)클래스
인터페이스
Inum
하나더있는데 안보였음

UML표기법 (객체지향모델링 설계 언어)
-  프라이빗
+  퍼블릭
#  프로텍티드(상속)



new > javafile> 

레퍼런스 주소 정보 라고함
레퍼런스정보 = 주소정보


자바변수의 종류 (3가지)
로컬변수
인스턴스변수
클래스변수


메소드안에 있으면 로컬변수

Static 라고 써져있으면 클래스 변수

//인스턴스 변수 (거의 변수는 인스턴스변수이다, 현대 제조사로 하면 클래스 변수)

클래스명 인터페이스명 제외하고는 소문자 지향 (자바는)

public class App {
    public static void main(String[] args) throws Exception {
        System.out.println("Hello, World!");
    }
}


스트링 타입


UML 
객체지향 설계 언어 
클래스다이어그램이라고 표현한다

클래스이름
속성
오퍼레이션

기본자료형

참조형(레퍼런스)클래스
인터페이스
Inum
하나더있는데 안보였음


UML표기법 (객체지향모델링 설계 언어)
-  프라이빗
+  퍼블릭
#  프로텍티드(상속)




질문: 
참조형(레퍼런스)클래스
인터페이스
Inum
하나더있는데 안보였음   <- 뭐였는지


-------------------------------------------------------------------------------------------------------------
2024.11.27(수)
개인학습

if else 와 return 은 같은 효과
=> if문으로만 만들면 모든 명령을 모두 실행
=> else로 하면 해당하는 명령 실행후 종료
=> return로 하면 해당하는 명령 실행후 종료

break하면 스위치문 끝나는 지점으로 이동함
=> if else 와 비슷한 구조라고 볼 수 있지만, 월에 대한 일수를 알려주는 프로그램 만들때 31일, 30일, 28일 있는 달에 맞춰서 break 사용
ex)
package megazon;

import java.util.*;

public class Sample {
	public static void main(String[] args)
	{
		Scanner s = new Scanner(System.in);
		System.out.println("날짜 수를 확인하고자 하는 월을 입력해 주세요");
		int month = s.nexInt();

		switch(month)
		{
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			System.out.println("31");
			break;
		case 4:
		case 6:
		case 9:
		case 11:
			System.out.println("30"{);
			break;
		case 2:
			System.out.println("28");
		default:
			System.out.println(month + "월은 존재하지 않습니다.");
		}
	}
}


입출금시스템 자바 (검색어)
자바가 동작할 수 있도록 메인메소드를 만들어주고 잔고변수를 생성하고 0으로 초기화
스캐너변수를 생성해서 금액을 입력받을 수 있도록한다
프로그램을 실행시키기위한 와일문으로 무한반복문을 생성해서 무한루프를 돌아갈 수 있게 한다
와일문 조건식에 while(true) 를 작성해서 무한으로 동작하게 한다

















-------------------------------------------------------------------------------------------------------------
2024.11.28(목)
기본적으로 알아야할 문법
조건문 반복문 제어문 자료문
------------------------
조건문
반복문
제어문
자료문

리액트 자바스크립트 2주,
스프링붙 JPA 4주 (자바를 알고있어야함, 외국어로 들릴 수 있음)
스프링클라우드

--
변수이름을 잘 지정해야함
변수, 데이터유형
변수앞에 데이터유형을 작성해야함

자료형:
기본자료형
참조형(레퍼런스데이터타입)
=> 참조형은 객체지향자료에서만 나옴

정수형 자료형 int 사용
정수형 값만 기여할 수 있다 
기본자료형이 중요하지만 참조형도 참 중요하다

학생정보를 관리하려고하면
학생데이터를 기본자료형으로 관리할 수 없다
학생이란 데이터를 관리하고싶다면 클래스를 만들어서 학생정보를 관리할 수 있다
참조형이라는게 뭐냐면
기본자료의 특징이뭐냐면 하나의 변수에 하나의 값만 저장할 수 있지만
여러개의 데이터를 관리할 수 있다는게 참조형 타입의 특징이라고 할 수 있다는게

참조형:
클래스, 인터페이스, 배열, 열거형, 

주소의 정보를 갖고있고 그주소를 통해서 메모리에 저장되는 데이터를 참조할 수 있기때문에
레퍼런스 주소를 통해서 여러개의 데이터를 접근할 수 있다는게 참조형의 특징

계좌라는 객체를 가지고 설명하심
은행에 가면 계좌를 개설하는데, 프로그램적으로 관리할 때 
계좌라는 클래스가 필요하다, 
회원가입할때 회원이라는 데이터로 관리할때 자바는 회원이라는 클래스로 만든거다

추상화 (가 필요하다)
속성, 기능
데이터가 있으면 메소드처럼 기능과 관리들을 오퍼레이션 관리하는 작업이 필요하다


첫글자가 대문자면 아 클래스구나 하고 알 수 있다

클래스 => 첫글자 대문자 

계좌니까 Account라고 지정하셨고, 
1 Account
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
1 - accountNumber: String    
1 - name: String
1 - pwd: String
1 - balance: int
1 + depo
1 + with
1 + 
  + 	


1 _
1ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

오늘 상속부터 할 예정


변수
1 - accountNumber: String    
1 - name: String
1 - pwd: String
1 - balance: int


메소드
1 + depo
1 + with
1 + 



-----------------------
    // instance method
    public int getBalance() {

    
    }

    => 카멘표기법 낙타표기법 이라고 한다

-------------------------------


메소드 만드는거 연습!! 필요!!

클래스를 사용하려면 객체를 생성하는 작업이 필요

계좌가 생성됬다고 하면 어카운트 객체가 하나가 생성됬다고 생각하면 된다

계좌라는 객체는 메모리내에서 관리하는거고, 영구적으로 관리하고싶다면 데이터베이스에 넣어서 관리해야한다




   // 계좌 객체 생성  (한개의 고객계좌가 생성이 됬다고 생각하면 된다)
        Account account1 = new Account("1111", "일길동", "aaaa", 10000);
		

   // 계좌 객체 생성  (한개의 고객계좌가 생성이 됬다고 생각하면 된다)
        Account account1(자료형) = new Account("1111", "일길동", "aaaa", 10000);
		(로컬지역변수)


	[stack]
account [?] <= 무름표에는 주소값이 저장되는구나 하고 기억해야한다


	[heap]   <-- 이걸 레퍼런스 변수라고 함
accountNumbername
pwd
balance



new는 객체를 생성한다     ( Account account1)
5000번지에 할당된다고 하면 5000번지를 account1 이라는 변수에 할당을 한다



Account("1111", "일길동", "aaaa", 10000);   <-- 생성자 메소드 호출이 되는 부분



stack이 heap의 레퍼런스 정보를 참조해서 작동한다



호출하는 코드
    // instance method
    public int getBalance() {
        return balance;
    
    }




public class Test {

    static int num1; //클래스 변수 0으로 초기화
    int num2;        //인스턴스 변수 0으로 초기화


    public static void main(String[] args) {
        int num3  //로컬 변수 0으로 초기화 작업이 이루어지지않음
		
		

    }
}



static는 언제든 쓸수있고
num2는 new로 객체를 생성해야 쓸수있다
Test test = new Test();


Car car1 = null 은 무조건 널값으로 초기화작업이 이루어진다

로컬변수 car2는 스택에 할당된다
- 힙이 메모리 car2는 메모리 할당이 안된다는 이야기

car2는 메모리힙에 객체가 생성이 되지않았다는 이야기
Test test = new Test(); <- 이걸안하면



src랑 copy는 같은거다 코드 (아래)
public class Test {

    

    public static void main(String[] args) {
       
        Account src = new Account("1111", "일길동", "aaaa", 10000);

        Account copy = src;

    }
}






copy.setPassword("bbbb")


static void main 상단에 static void print 정의를 해주면 객체 생성 없이 접근이 가능함
=> 이걸 콜바이레퍼런스 라고 한다
콜바이레퍼런스



항상 메인에서 호출 하는 거지 다른데서 호출하지 않는다

트루 펄스는 불린
True False



---------------상속 (아래)
상속이 가지고있는 특징
다형성



부모 상위 Super클래스

자식 하위 Sub클래스


사원은 추상클래스로 만들어야한다

메소드를 재정의할께 아니라면 상속을 쓸필요가 없다

메소드오버라이딩 메소드재정의
- 상속하고 추상클래스에서 나온 이야기


1) 상위클래스 먼저 만든다
2) 일반화 관계를 상속관계로 표현한다 (class 하위클래스명 extends 상위클래스명 {
}
3) 메소드 선언부는 완전히 같아야한다
4)  


퍼블릭 클래스 뭐뭐 퍼블릭 클래스 뭐뭐는 1개만 올 수 있다




소스액션 만들면 체크하고 생성 하는데, 이후에 상위에 디폴트 메소드 (체크안하고 생성하는) 생성해주는 습관 들여야함


객체생성

(다형성)
public boolean equals(object obj) {
}


문자비교는 무조건 .equls를 통해서 비교해야된다
== 쓰면 안된다고 한다


== 이렇게 쓰면 문자를


오브젝트, 이퀄스, 스트링 등
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/package-summary.html
Overview> java.base> java.lang> All Classes and Interfaces> Object

컬렉션프레임워크 중에 어레이리스트
맵하고 리스트


숙제-------------------------------
은행 입출금 관리 시스템

1. 계좌 등록
2. 입금
3. 출근
4. 잔액 조회
5. 계좌 상세조회
6. 계좌 목록 수정
7. 계좌 정보 삭제
8. 계좌 목록 조회
9. 종료
항목을 선택하세요
-----------------------------------

입력받을때
스캐너는 실제로는 쓸일없음
=> 


익셉션 예외 상황 처리 (중복 계좌 대응)

컬렉션 프레임워크

자바에서 여러객체를 관리를 할때
리스트, 셋, 맵 이나 여러가지 방법이있음





-------------------------------------------------------------------------------------------------------------
2024.11.28(금)
타입변환, 강제 형변환, 자료형 강제변환
package method;

public class Study {

	public static void main(String[] args) {
    
		   int intValue = 44032;
		   char charValue = (char) intValue; 
		   
		   System.out.println(charValue);
		   
		   
		   double doubleValue = 3.14;
		   intValue = (int) doubleValue;
		   
		   System.out.println(intValue);
	}	 
}
결과값: 
가
3

비고:
44032 -> 유니코드값으로 해석하는 char 로 변경하여 '가' 출력
3.14 -> 실수형에서 정수형 자료형으로 변경하여 소수점자리 삭제 후 출력



	    
char charValue = (char) intValue    ->  int(4B) -> char(2B)
intValue = (int) doubleValue;		-> 	double(8B) -> int(4B)
=> 바이트수가 더 작은 자료형으로 변경할 때 컴파일 에러 발생하면, 강제 형변환으로 해결가능


※궁금사항
특정 변수를 byte로 저장하고, 숫자를 byte로 출력할때 컴파일 에러만 발생한다는건지, 자동으로 형이 변환된다는 건지 헛갈림
강제형변환을 관리자가 사용할 수 있다는 사실은 인지했음
-------------------------



형 변환 (Integer, String.valueOf 를 이용한)
package method;

public class Study {

	public static void main(String[] args) {
    
		int value1 = Integer.parseInt("10"); //문자열10을 정수10으로 변환
		System.out.println("value1: " + value1);
		
		String str1 = String.valueOf(10); //정수10을 문자열10으로 변환
		System.out.println("str1: " + str1);
		  
		  
	}	 
}
	    

결과값: 
value1: 10
str1: 10



--------------------
%d  정수
%f	실수
%s	문자열
--------------------


증감연산자
package method;

public class Study {

	public static void main(String[] args) {
    
		int x = 10;
		int y= 10;
		int z;
		
		x++;
		++x;
		System.out.println("x=" + x);
		
		y--;
		--y;
		System.out.println("y=" +y);
				
		z = x++;
		System.out.println("z=" + z);
		System.out.println("x=" + y);
		
		z = ++x;
		System.out.println("z=" + z);
		System.out.println("z=" + x);
		
		z = ++x + y++;
		
		System.out.println("z=" + z);
		System.out.println("x=" + x);
		System.out.println("y=" + y);	
		
	}	 
}

결과값: 
x=12
y=8
z=12
x=13
z=14
z=14
z=23
x=15
y=9
    
비고: z=12, x=13 값을 보면 상승하고 대입하냐, 상승안하고 대입하냐 차이  (z = x++; 이부분)
특이사항: z는 x=13 위치에서 출력해도 z=12임
디버깅해보기는게 이해가 빠름 !!


-------------------------------------------------------------------------------------------------------------
2024.12.02(월)

기본형 -> new를 하면 기본형 저장공간
클래스 -> new를 하면 주소 저장공간



테라폼 = 쿠버네티스 인걸로 보임



-------------------------------------------------------------------------------------------------------------
2024.12.03(화)


숙제-------------------------------
은행 입출금 관리 시스템

1. 계좌 등록
2. 입금
3. 출근
4. 잔액 조회
5. 계좌 상세조회
6. 계좌 목록 수정
7. 계좌 정보 삭제
8. 계좌 목록 조회
9. 종료
항목을 선택하세요
-----------------------------------


일반적으로 버퍼랑 리더를 많이 사용한다
레이어드아키텍처 스타일

웹계층 
서비스계층

결합도를 낮춰서 인터페이스를 사용하게된다

스프링붙 가면 레이어와 레이어간 호출할때 인터페이스 호출이 필수라고 할 수 있다

오늘 알아야 할꺼
마이크로서비스를 개발하거나
자바에서 어플리케이션을 개발할때
가장많이쓰는게 레이어드아키텍처스타일을 많이쓰는데
결합도를 낮추기 위해서 인터페이스를 이용한다 정도


구상메소드


 
 
 
Concrete 메소드 (구상메소드)

메소드와 메소드끼리 구현한걸 구상메소드

car의 경우 구상클래스, 구상메소드라고 하고

추상메소드는 구현할 수 없는걸 추상메소드라고한다


추상클레스는 인터페이스만 가지고 있는 것


다른패키지(폴더)의 자료를 사용하고 싶을때
import utils.* 이런식으로 정의해주면 됨


주석처리 컨트롤 /

오버라이딩 ㄱ시키고 싶다면 반드시 앞에 ㅍㅍ퍼블릭을 넣어야된다


초기화 하고 싶으면 null 이라고 하면 된다


인터페이스는 절때로 객체를 생성할 수 없다


예외 (Excptipon)

catch 는 0개 이상



{
}
스코프라고 한다

체크드인셉션
인셉션 사용할때 상위클래스가 아래에 있어야 한다
- 상위 인셉션이 먼저 위쪽에 있으면 에러를 위에서 다 잡고 아래까지 내려가지않아서 이다


언체크드인셉션
아 에러가 발생했구나 하고 코드를 수정하면 된다 -> 원한다면 예외처리해도 된다


+둘레의 길이를 구하다
+넓이를 구하다



Generic(제네릭
제네릭을 하는 이유는 컬렉션 프레임워크때 사용해서 강의하신다



-------------------------------------------------------------------------------------------------------------
2024.12.04(수)
숙제






-------------------------------------------------------------------------------------------------------------
2024.12.05(목)

결합도를 낮추는 걸 전문용어로 Loose Coupling

UML 클래스 다이어그램
객체지향 설계 

자바에서 _를 쓰는 경우는 상수를 표현할때 라고 한다 (예시: MAX_VALUE)
  

1. 인터페이스 만든다
2. 클래스만든다
3. 객체를 생성한다


제네릭
int는 기본자료형이고 Intergar 는 레퍼런스형(참조형) 이다  제네릭은 기본자료형은 올수없다 
제네릭을 쓰는 이유는 컬렉션때문인데 다양한 데이터타입을 사용하기 위해서이다

---
Wrapper
Boxing
검색해봐야함
---

제네릭클리스는 super가 올수없다
// 제네릭 클래스
class Box<T extends Number> {  // Type Parameter      <-- 이건 모든타입이 올수 있는 T를 Number만 올 수 있게 제한한거다, 넘버이거나 넘버를 상속받은 하위클래스들이 올 수 있다는 뜻
이건 되지만
// 제네릭 클래스
class Box<T super Number> {  // Type Parameter
super는 올 수 없다


패키지는 소문자로 해야한다

1. 객체생성
> 생성자메소드 
void
add(int index, E element)
Inserts the specified element at the specified position in this list.
boolean
add(E e)
Appends the specified element to the end of this list.


어레이리스트는 기본이 10개 (객체를 저장할 수 있는 공간이 10개)



MAP (맵)
코딩은 해쉬맵 사용
키가 오브젝트이면 레퍼런스타입이 올 수 있다

------- 프론트엔드와 백엔드사이의 흐름
숙제 
주소록 관리 프로그램
=> 스캐너말고 io 활용,  1,2,3,4, 대신 이너블 활용해서 가독성 좋게 할 수 있다,  (java.io -> buper.io 
1. 연락쳐 등록
2. 연락쳐 검색
3. 연락쳐 삭제
4. 연락쳐 목록조회
5. 연락쳐 수정
6. 종료
----


게시판 짜는게 평가 (node.js)

-------------------------------------------------------------------------------------------------------------
해야할일!
조건문 반복문 제어문 자료문
메소드 만드는거
상속, 오버라이딩
오브젝트  (구글에서 java api 17> Module java.base> 안에서 찾아서 오브젝트나왔음 (물어봐야함)
equals
다형성


숙제

정수타입 byte, char, short, int, long
실수타입 float, double
논리타입 booleanㅣ
16진수 -> 2진수 -> 10진수  순으로 변경해야 함
0xB3 -> 1011 0011 -> 128 + 32 + 16 + 2 + 1


-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
AWS SAA
SQLD
NCP (네이버클라우드)
PCCP 5급

-------------------------------------------------------------------------------------------------------------
- 출력방식
%b boolean형식 
%d 10진 정수
%o 8진 정수
%x, %X 16진 정수
%f 부동소수점
%e, %E 지수표현식
%c 문자
%s 문자열

public class Test {

클래스변수    static int num1; //클래스 변수 0으로 초기화
인스턴스변수    int num2;        //인스턴스 변수 0으로 초기화


    public static void main(String[] args) {
로컬변수        int num3  //로컬 변수 0으로 초기화 작업이 이루어지지않음
    }
}
UML표기법 (객체지향모델링 설계 언어)
-  프라이빗
+  퍼블릭
#  프로텍티드(상속)


김신옥선생님
javaenjoy0714@gmail.com

선생님 깃허브
https://github.com/kimsinok/lecture-java

오브젝트 자바 라이브러리? 다운로드 사이트
https://docs.oracle.com/en/java/javase/17/docs/api/


노션 (본인, 구글로 로그인)
https://www.notion.so/

본인 깃허브
https://github.com/bellipetti/devops/

인프런 
https://www.inflearn.com/

컨트롤 + ~(틸드) 하면 콘솔창 on/off 가능

컨트롤 + Car 클릭하면 Car 이라는 메소드로 이동함



